---
# Configure services - runs after the install stage

- name: Create directory for libvirt socket
  ansible.builtin.file:
    state: directory
    path: "{{ libvirt_host_socket_dir }}"
    owner: root
    group: root
    mode: 0755
  become: true
  when: libvirt_host_socket_dir | length > 0

- name: Process lineinfile rules
  ansible.builtin.lineinfile: "{{ rule.args }}"
  become: true
  loop: "{{ libvirt_host_lineinfile_extra_rules | default([]) }}"
  loop_control:
    loop_var: rule
  when: rule.condition
  notify:
    - restart libvirt

- name: Ensure configuration files exist
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: 0644
  become: true
  loop: "{{ _libvirt_config_files | selectattr('enabled') }}"
  loop_control:
    label: "{{ item.dest | basename }}"
  vars:
    _libvirt_config_files:
      - src: libvirtd.conf.j2
        dest: /etc/libvirt/libvirtd.conf
        enabled: "{{ libvirt_host_libvirtd_conf_enabled | bool }}"
      - src: qemu.conf.j2
        dest: /etc/libvirt/qemu.conf
        enabled: "{{ libvirt_host_qemu_conf_enabled | bool }}"
      - src: sasl.conf.j2
        dest: /etc/sasl2/libvirt.conf
        enabled: "{{ libvirt_host_sasl_conf_enabled | bool }}"
  notify:
    - restart libvirt

- name: Create systemd drop-in directory for socket listen address
  ansible.builtin.file:
    path: "/etc/systemd/system/{{ item.service }}.d"
    state: directory
    owner: root
    group: root
    mode: 0755
  become: true
  loop: "{{ _libvirt_socket_services | selectattr('enabled') }}"
  when:
    - item.listen_address is not none
    - item.listen_address | length > 0
  loop_control:
    label: "{{ item.service }}"
  vars:
    _libvirt_listen_stream: "{{ item.listen_address }}"

- name: Configure socket listen address
  ansible.builtin.template:
    src: socket.j2
    dest: "/etc/systemd/system/{{ item.service }}.d/listen-address.conf"
    owner: root
    group: root
    mode: 0644
  become: true
  loop: "{{ _libvirt_socket_services | selectattr('enabled') }}"
  when:
    - item.listen_address is not none
    - item.listen_address | length > 0
  loop_control:
    label: "{{ item.service }}"
  vars:
    _libvirt_listen_stream: "{{ item.listen_address }}"
  notify:
    - reload systemd
    - restart libvirt

- name: Create directory for TLS certificates and keys
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0700
  become: true
  loop: >-
    {{ _libvirt_tls_certs.values() |
       selectattr('content') |
       map(attribute='dest') |
       map('dirname') |
       unique }}
  when:
    - libvirt_host_tls_listen | bool

- name: Copy TLS certificates and keys
  ansible.builtin.copy:
    content: "{{ _libvirt_loop_item.content }}"
    dest: "{{ _libvirt_loop_item.dest }}"
    owner: root
    group: root
    mode: "{{ _libvirt_loop_item.mode }}"
  become: true
  # NOTE: Loop over keys of _libvirt_tls_certs to avoid leaking the key
  # contents.
  loop: "{{ _libvirt_tls_certs.keys() }}"
  when:
    - libvirt_host_tls_listen | bool
    - _libvirt_loop_item.content
  vars:
    _libvirt_loop_item: "{{ _libvirt_tls_certs[item] }}"
  notify: restart libvirt

- name: Ensure libvirt SASL user exists
  ansible.builtin.shell:
    cmd: >
      set -o pipefail &&
      echo {{ item.password }} |
      saslpasswd2 -c -p -a libvirt {{ item.username }}
    executable: /bin/bash
  become: true
  no_log: true
  changed_when: true
  loop: "{{ libvirt_host_sasl_credentials }}"
  when: libvirt_host_enable_sasl_support | bool

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Ensure the libvirt daemon is started and enabled
  ansible.builtin.service:
    name: "{{ item.service }}"
    state: "{{ item.enabled | bool | ternary('started', 'stopped') }}"
    enabled: "{{ item.enabled | bool }}"
  become: True
  loop: "{{ _libvirt_services }}"
  loop_control:
    label: "{{ item.service }}"
  vars:
    _libvirt_services:
      - service: libvirtd-tcp.socket
        enabled: "{{ libvirt_host_tcp_listen | bool }}"
      - service: libvirtd-tls.socket
        enabled: "{{ libvirt_host_tls_listen | bool }}"
      - service: libvirtd
        enabled: true
